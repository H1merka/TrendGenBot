# bot.py
from vkbottle.bot import Message, Bot
from vkbottle import Keyboard, Text, KeyboardButtonColor
from vk_utils import get_group_posts, sorting_posts, normalize_group_id
from postanalyzer import PostAnalyzer
import asyncio
from datetime import datetime, timedelta
from config import VK_CLIENT_ID, TOKEN
import re


bot = Bot(token=TOKEN)

# user_id: { "token": str, "period": str }
user_states = {}


# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
def main_keyboard():
    return (
        Keyboard(inline=False)
        .add(Text("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", payload={"cmd": "auth"}), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞", payload={"cmd": "analyze"}), color=KeyboardButtonColor.PRIMARY)
        .row()
        .add(Text("–ó–∞ –Ω–µ–¥–µ–ª—é", payload={"cmd": "analyze_week"}), color=KeyboardButtonColor.PRIMARY)
        .add(Text("–ó–∞ –º–µ—Å—è—Ü", payload={"cmd": "analyze_month"}), color=KeyboardButtonColor.PRIMARY)
        .row()
        .add(Text("–ü–æ–º–æ—â—å", payload={"cmd": "help"}), color=KeyboardButtonColor.SECONDARY)
    )


@bot.on.message(text="/start")
async def start_handler(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ. üìà\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        keyboard=main_keyboard()
    )


@bot.on.message(payload={"cmd": "help"})
async def help_handler(message: Message):
    await message.answer(
        "üí° –Ø –º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω—Ç–µ–Ω—Ç –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.\n"
        "–ù–∞–∂–º–∏—Ç–µ '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å access_token.\n"
        "–ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω.\n\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ '–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞' –∏ –≤–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.\n\n"
        "–ü—Ä–∏–º–µ—Ä ID: `vk`, `public123456`, `my_group_name`"
    )


@bot.on.message(payload={"cmd": "auth"})
async def auth_handler(message: Message):
    auth_url = (
        f"https://oauth.vk.com/authorize?"
        f"client_id={VK_CLIENT_ID}"
        f"&display=page"
        f"&redirect_uri=https://oauth.vk.com/blank.html"
        f"&scope=groups,wall,offline"
        f"&response_type=token"
        f"&v=5.131"
    )

    await message.answer(
        "üîê –î–ª—è —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É.\n\n"
        "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, –Ω–∞–∂–º–∏—Ç–µ '–†–∞–∑—Ä–µ—à–∏—Ç—å', –∞ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ `access_token` –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏:\n\n"
        f"{auth_url}"
    )


@bot.on.message(payload={"cmd": "analyze"})
async def ask_for_group_all(message: Message):
    user_id = message.from_id
    user_states[user_id] = user_states.get(user_id, {})
    user_states[user_id]["period"] = "all"
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:")


@bot.on.message(payload={"cmd": "analyze_week"})
async def ask_for_group_week(message: Message):
    user_id = message.from_id
    user_states[user_id] = user_states.get(user_id, {})
    user_states[user_id]["period"] = "week"
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞ *–Ω–µ–¥–µ–ª—é*:")


@bot.on.message(payload={"cmd": "analyze_month"})
async def ask_for_group_month(message: Message):
    user_id = message.from_id
    user_states[user_id] = user_states.get(user_id, {})
    user_states[user_id]["period"] = "month"
    await message.answer("üóìÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞ *–º–µ—Å—è—Ü*:")


@bot.on.message()
async def message_handler(message: Message):
    user_id = message.from_id
    text = message.text.strip()

    # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å access_token
    match = re.search(r'access_token=([\w\d\._\-]+)', text)
    token = match.group(1) if match else text

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ç–æ–∫–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
    if (token.startswith("vk1.") or token.startswith("e") or token.startswith("2")) and len(token) > 50:
        user_states[user_id] = user_states.get(user_id, {})
        user_states[user_id]["token"] = token
        await message.answer("‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ '–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞' –∏ –≤–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.")
        return

    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å–∏–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    state = user_states.get(user_id)
    if not state or "token" not in state:
        await message.answer("üîí –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ access_token.")
        return

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã –ø–æ ID —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
    group_id = normalize_group_id(text)
    period = state.get("period", "all")

    await message.answer(f"üîç –ü–æ–ª—É—á–∞—é –ø–æ—Å—Ç—ã —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ `{group_id}`...")

    posts = await get_group_posts(group_id, access_token=state["token"])

    if isinstance(posts, dict) and "error" in posts:
        await message.answer(f"‚ùå VK API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {posts['error']}")
        return
    if not posts:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –∏–ª–∏ –¥–æ—Å—Ç—É–ø.")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–µ—Ä–∏–æ–¥—É
    date_from = None
    if period == "week":
        date_from = datetime.now() - timedelta(days=7)
    elif period == "month":
        date_from = datetime.now() - timedelta(days=30)

    await message.answer(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞ {'–ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é' if period == 'week' else '–ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü' if period == 'month' else '–≤—Å—ë –≤—Ä–µ–º—è'}...")

    top_posts = await sorting_posts(posts, date_from=date_from)
    analyzer = PostAnalyzer()
    recommendations = await asyncio.to_thread(analyzer.analyze_posts, top_posts)

    await message.answer("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:\n\n" + recommendations, keyboard=main_keyboard())


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    bot.run_forever()
