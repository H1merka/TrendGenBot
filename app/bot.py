# bot.py
from vkbottle.bot import Message
from vkbottle import Keyboard, Text, KeyboardButtonColor
from vk_utils import get_group_posts, sorting_posts
from postanalyzer import PostAnalyzer
from bot_instance import bot
import asyncio
from datetime import datetime, timedelta


# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
def main_keyboard():
    return (
        Keyboard(inline=False)
        .add(Text("üìä –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞", payload={"cmd": "analyze"}), color=KeyboardButtonColor.PRIMARY)
        .add_row()
        .add(Text("üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é", payload={"cmd": "analyze_week"}), color=KeyboardButtonColor.SECONDARY)
        .add(Text("üóìÔ∏è –ó–∞ –º–µ—Å—è—Ü", payload={"cmd": "analyze_month"}), color=KeyboardButtonColor.SECONDARY)
        .add_row()
        .add(Text("‚ÑπÔ∏è –ü–æ–º–æ—â—å", payload={"cmd": "help"}), color=KeyboardButtonColor.SECONDARY)
    )


@bot.on.message(text="/start")
async def start_handler(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ. üìà\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        keyboard=main_keyboard()
    )


@bot.on.message(payload={"cmd": "help"})
async def help_handler(message: Message):
    await message.answer(
        "üí° –Ø –º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω—Ç–µ–Ω—Ç –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.\n"
        "–ù–∞–∂–º–∏—Ç–µ 'üìä –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞' –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –∏–ª–∏ ID —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.\n\n"
        "–ü—Ä–∏–º–µ—Ä: `vk`, `public123456`, `my_group_name`"
    )


@bot.on.message(payload={"cmd": "analyze"})
async def ask_for_group_id(message: Message):
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:")


@bot.on.message(payload={"cmd": "analyze_week"})
async def ask_for_group_week(message: Message):
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞ *–Ω–µ–¥–µ–ª—é*:")


@bot.on.message(payload={"cmd": "analyze_month"})
async def ask_for_group_month(message: Message):
    await message.answer("üóìÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞ *–º–µ—Å—è—Ü*:")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.on.message()
async def analyze_handler(message: Message):
    group_id = message.text.strip()
    if not group_id:
        return

    await message.answer(f"üîç –ü–æ–ª—É—á–∞—é –ø–æ—Å—Ç—ã —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ `{group_id}`...")

    posts = await get_group_posts(group_id)
    if not posts:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –∏–ª–∏ –¥–æ—Å—Ç—É–ø.")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–µ—Ä–µ–∑ last payload)
    last_payload = message.payload or {}
    date_from = None
    period = "–≤—Å—ë –≤—Ä–µ–º—è"

    if "analyze_week" in last_payload.values():
        date_from = datetime.now() - timedelta(days=7)
        period = "–ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é"
    elif "analyze_month" in last_payload.values():
        date_from = datetime.now() - timedelta(days=30)
        period = "–ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü"

    await message.answer(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞ {period}...")

    top_posts = await sorting_posts(posts, date_from=date_from)
    analyzer = PostAnalyzer()
    recommendations = await asyncio.to_thread(analyzer.analyze_posts, top_posts)

    await message.answer("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:\n\n" + recommendations, keyboard=main_keyboard())


bot.run_forever()
